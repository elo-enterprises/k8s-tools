services:

  base: &base
    image: k8s:base
    build:
      context: .
      dockerfile_inline: |
        FROM alpine/k8s:1.30.0
        RUN apk --no-cache add procps make
        RUN apk add yq --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community
    network_mode: host
    working_dir: /workspace
    volumes:
      - ${PWD}:/workspace
      # - "${KUBECONFIG}:/kubeconfig.conf:ro"
      - ${HOME}/.kube:/root/.kube
      # used by helm, maybe others
      - ${HOME}/.cache:/root/.cache
      - ${HOME}/.config/helm:/root/.config/helm
      - ${HOME}/.local:/root/.local:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      KUBECONFIG: "${KUBECONFIG}"

  helm:
    <<: *base
    entrypoint: helm

  kubectl:
    <<: *base
    entrypoint: kubectl

  # https://knative.dev/docs/client/install-kn/
  kn: &knative
    <<: *base
    depends_on: ['base']
    image: k8s:kn
    build:
      context: .
      dockerfile_inline: |
        FROM k8s:base as base
        FROM ghcr.io/knative/func/func as builder
        FROM gcr.io/knative-releases/knative.dev/client/cmd/kn:latest
        COPY --from=builder /ko-app/func /ko-app/func
        COPY --from=base /usr/bin/kubectl /usr/bin/kubectl
        RUN apk --no-cache add bash procps make python3 py-yaml
        RUN cp /ko-app/func /usr/local/bin/kn-func

  # https://github.com/arttor/helmify
  helmify:
    <<: *base
    depends_on: ['base']
    image: k8s:helmify
    build:
      context: .
      dockerfile_inline: |
        FROM debian
        RUN apt-get update && apt-get install -y curl
        RUN cd /tmp && curl -s -Lo helmify.tgz \
            https://github.com/arttor/helmify/releases/download/v0.4.12/helmify_Linux_i386.tar.gz
        RUN
        RUN cd /tmp && tar -zxvf helmify.tgz && chmod +x helmify && mv helmify /usr/local/bin/
        # RUN apt-get install -y file
        # RUN helmify --version
    entrypoint: helmify
    tty: false
    stdin_open: true
  
  # https://fission.io/docs/installation/
  fission:
    <<: *base
    depends_on: ['base']
    image: k8s:fission
    build:
      context: .
      dockerfile_inline: |
        FROM k8s:base
        RUN curl -s -Lo fission \
            https://github.com/fission/fission/releases/download/v1.20.1/fission-v1.20.1-linux-amd64
        RUN chmod +x fission && mv fission /usr/local/bin/
    entrypoint: fission


  # https://github.com/kubernetes/kompose/blob/main/docs/installation.md#github-release
  kompose:
    <<: *base
    depends_on: ['base']
    image: k8s:kompose
    build:
      context: .
      dockerfile_inline: |
        FROM k8s:base
        RUN curl -L https://github.com/kubernetes/kompose/releases/download/v1.33.0/kompose-linux-amd64 -o /usr/bin/kompose
        RUN chmod ugo+x /usr/bin/kompose
    entrypoint: kompose

  k3d:
    <<: *base
    depends_on: ['base']
    image: k8s:k3d
    build:
      context: .
      dockerfile_inline: |
        FROM k8s:base
        RUN curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=v5.3.0 bash
    entrypoint: k3d

  k9s:
    # NB: no inheritance from `base` since `build` conflicts with `image`.
    build: https://github.com/derailed/k9s.git#master:/
    tty: true
    network_mode: host
    volumes:
      - type: bind
        source: ${KUBECONFIG}
        target: /kubeconfig.conf
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      KUBECONFIG: "/kubeconfig.conf"
    entrypoint: k9s

  yq: 
    # NB: included in base, but this option is slimmer
    image: mikefarah/yq:4.43.1
  jq:
    # NB: included in base, but this option is slimmer
    image: ghcr.io/jqlang/jq:1.7.1
