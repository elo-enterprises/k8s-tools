#!/usr/bin/env -S docker compose -f
# k8s-tools: 
#  Collect, pin & customize versions for your whole k8s toolchain in one place
#
# This docker compose file describes various tool containers, sets up reasonable
# defaults for volumes, includes fixes for root-container permissions, etc.
#
# Docs: https://github.com/elo-enterprises/k8s-tools
# Latest: https://github.com/elo-enterprises/k8s-tools/tree/master/k8s-tools.yml
#
# Local parts of the tool bundle:
#   helmify, kompose, kubefwd, lazydocker,
#   kind, argocli, kn, k3d, k9s, fission, rancher
#
# Upstream part of the tool bundle (See alpine/k8s docs)
#   kubectl, kustomize, krew, vals, kubeconform, kubeseal, 
#   helm, helm-diff, helm-unittest, helm-push, eksctl, 
#   aws-iam-authenticator, awscli v1
#
# See also: https://docs.docker.com/compose/environment-variables/set-environment-variables/#cli
services:
  k8s: &base
    image: k8s:base
    hostname: k8s-base
    environment: &base_environment
      KUBECONFIG: "${KUBECONFIG:-~/.kube/config}"
      DOCKER_UID: ${DOCKER_UID:-1000}
      DOCKER_GID: ${DOCKER_GID:-1000}
      DOCKER_UGNAME: ${DOCKER_UGNAME:-root}
      DOCKER_HOST_WORKSPACE: ${DOCKER_HOST_WORKSPACE:-${PWD}}
      TERM: ${TERM:-xterm-256color}
    build:
      context: .
      dockerfile_inline: |
        FROM ${ALPINE_K8S_VERSION:-alpine/k8s:1.30.0} as builder
        RUN cp /krew-* /usr/bin/krew
        FROM ghcr.io/charmbracelet/gum as gum
        FROM ${ALPINE_K8S_VERSION:-alpine/k8s:1.30.0} 
        COPY --from=gum /usr/local/bin/gum /usr/bin
        COPY --from=builder /usr/bin/krew /usr/bin/
        RUN apk --no-cache add procps make ncurses shadow coreutils pv uuidgen
        RUN echo ${DOCKER_GID:-1000} && getent group ${DOCKER_GID:-1000} \
          || groupadd --gid ${DOCKER_GID:-1000} docker
        RUN getent passwd ${DOCKER_UGNAME:-root} || \
          useradd --uid ${DOCKER_UID:-1000} --create-home \
          -g ${DOCKER_GID:-1000} ${DOCKER_UGNAME:-root}
        RUN mkdir -p /home/${DOCKER_UGNAME:-root}/.kube /home/${DOCKER_UGNAME:-root}/.krew /home/${DOCKER_UGNAME:-root}/.config
        RUN KREW_ROOT=/home/${DOCKER_UGNAME:-root}/.krew krew install ctx ns graph sick-pods ktop 
        RUN KREW_ROOT=/home/${DOCKER_UGNAME:-root}/.krew krew install ${KREW_PLUGINS:-ctx}
        RUN cp /home/${DOCKER_UGNAME:-root}/.krew/bin/kubectl-ns /usr/bin/kubens
        RUN cp /home/${DOCKER_UGNAME:-root}/.krew/bin/kubectl-ctx /usr/bin/kubectx
        RUN cp /home/${DOCKER_UGNAME:-root}/.krew/bin/* /usr/bin
        RUN chown -R ${DOCKER_UID:-1000}:${DOCKER_GID:-1000} /home/${DOCKER_UGNAME:-root}/
        RUN curl https://raw.githubusercontent.com/holman/spark/master/spark -o /usr/bin/spark && chmod +x /usr/bin/spark
        USER ${DOCKER_UGNAME:-root}
        ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/${DOCKER_UGNAME:-root}/.krew/bin
    # NB: Left for reference, and possibly required by older versions of docker or certain configurations?  
    # user: ${DOCKER_UID:-1000}:${DOCKER_GID:-1000}
    network_mode: host
    working_dir: /workspace
    volumes:
      # Share the docker sock.  Almost everything will need this
      - ${DOCKER_SOCKET:-/var/run/docker.sock}:/var/run/docker.sock
      # Share /etc/hosts, so tool containers have access to any custom or kubefwd'd DNS
      - /etc/hosts:/etc/hosts:ro
      # Share the working directory with containers.  
      # Overrides are allowed for the workspace, which is occasionally useful with DIND
      - ${workspace:-${PWD}}:/workspace
      # NB: `.cache` and `.config` as below are used by helm, maybe others?
      # - ${HOME}/.cache:/home/${DOCKER_UGNAME:-root}/.cache
      # - ${HOME}/.config/helm:/home/${DOCKER_UGNAME:-root}/.config/helm
      # - ${HOME}/.local:/home/${DOCKER_UGNAME:-root}/.local:ro
      
      # NB: Recommended approach for kubeconfig.  
      # Use something like this if you only want to share one file.
      - "${KUBECONFIG:-~/.kube/config}:/home/${DOCKER_UGNAME:-root}/.kube/config"
      
      # NB: Another approach to kubeconfig is sharing ~/.kube directly. 
      # This is not recommended because it may involve different krew plugins, 
      # and may conflict with simpler usage of KUBECONFIG.
      # - ${HOME}/.kube:/home/${DOCKER_UGNAME:-root}/.kube
      
      # NB: Add this if you're working with EKS and need AWS creds, similar for azure
      # - ${HOME}/.aws:/home/${DOCKER_UGNAME:-root}/.aws
    tty: true 

  # https://github.com/charmbracelet/gum
  gum:
    <<: *base
    image: k8s:gum
    hostname: k8s:gum
    entrypoint: gum
    tty: false

  # https://helm.sh/docs/
  helm:
    <<: *base
    entrypoint: helm
    hostname: k8s:helm
  
  # https://kubernetes.io/docs/reference/kubectl/
  kubectl:
    <<: *base
    entrypoint: kubectl
    hostname: k8s:kubectl

  # https://github.com/kubernetes-sigs/kustomize
  kustomize:
    <<: *base
    entrypoint: kustomize
    hostname: k8s:kustomize

  # https://github.com/databus23/helm-diff
  helm-diff:
    <<: *base
    entrypoint: helm-diff
    hostname: k8s:helm-diff

  # https://github.com/helm-unittest/helm-unittest
  helm-unittest:
    <<: *base
    entrypoint: helm-unittest
    hostname: k8s:helm-unittest

  # https://github.com/chartmuseum/helm-push
  helm-push:
    <<: *base
    entrypoint: helm-push
    hostname: k8s:helm-push

  # https://github.com/kubernetes-sigs/aws-iam-authenticator
  aws-iam-authenticator:
    <<: *base
    entrypoint: aws-iam-authenticator
    hostname: k8s:aws-iam-authenticator

  # https://github.com/weaveworks/eksctl
  eksctl:
    <<: *base
    entrypoint: eksctl
    hostname: k8s:eksctl

  # https://github.com/aws/aws-cli
  awscli: # v1
    <<: *base
    entrypoint: awscli
    hostname: k8s:awscli

  # https://github.com/bitnami-labs/sealed-secrets
  kubeseal:
    <<: *base
    entrypoint: kubeseal
    hostname: k8s:kubeseal

  # https://github.com/kubernetes-sigs/krew
  krew:
    <<: *base
    entrypoint: krew
    hostname: k8s:krew

  # https://github.com/helmfile/vals
  vals:
    <<: *base
    entrypoint: vals
    hostname: k8s:vals

  # https://github.com/yannh/kubeconform
  kubeconform:
    <<: *base
    entrypoint: kubeconform
    hostname: k8s:kubeconform

  # https://knative.dev/docs/client/install-kn/
  kn: &knative
    <<: *base
    depends_on: ['k8s']
    image: k8s:kn
    hostname: k8s:kn
    build:
      context: .
      dockerfile_inline: |
        FROM k8s:base as base
        FROM ghcr.io/knative/func/func as builder
        FROM gcr.io/knative-releases/knative.dev/client/cmd/kn:${KN_CLI_VERSION:-v1.14.0}
        COPY --from=builder /ko-app/func /ko-app/func
        COPY --from=base /usr/bin/kubectl /usr/bin/
        RUN apk --no-cache add bash procps make
        RUN cp /ko-app/func /usr/bin/kn-func

  # https://github.com/arttor/helmify
  helmify:
    <<: *base
    depends_on: ['k8s']
    image: k8s:helmify
    hostname: k8s:helmify
    build:
      context: .
      dockerfile_inline: |
        FROM debian
        RUN apt-get update && apt-get install -y curl
        RUN cd /tmp && curl -s -Lo helmify.tgz \
            https://github.com/arttor/helmify/releases/download/${HELMIFY_CLI_VERSION:-v0.4.12}/helmify_Linux_i386.tar.gz
        RUN cd /tmp && tar -zxvf helmify.tgz && chmod +x helmify && mv helmify /usr/local/bin/
    entrypoint: helmify
    tty: false
    stdin_open: true

  # https://fission.io/docs/installation/
  fission:
    <<: *base
    depends_on: ['k8s']
    image: k8s:fission
    hostname: k8s:fission
    build:
      context: .
      dockerfile_inline: |
        FROM k8s:base
        USER root 
        RUN curl -s -Lo fission \
            https://github.com/fission/fission/releases/download/${FISSION_CLI_VERSION:-v1.20.1}/fission-${FISSION_CLI_VERSION:-v1.20.1}-linux-amd64
        RUN chmod +x fission && mv fission /usr/local/bin/
        USER ${DOCKER_UGNAME:-root}
    entrypoint: fission


  # https://github.com/kubernetes/kompose/blob/main/docs/installation.md#github-release
  kompose:
    <<: *base
    depends_on: ['k8s']
    image: k8s:kompose
    hostname: k8s:kompose
    build:
      context: .
      dockerfile_inline: |
        FROM k8s:base
        USER root 
        RUN curl -L https://github.com/kubernetes/kompose/releases/download/${KOMPOSE_CLI_VERSION:-v1.33.0}/kompose-linux-amd64 -o /usr/bin/kompose
        RUN chmod ugo+x /usr/bin/kompose
        USER ${DOCKER_UGNAME:-root}
    entrypoint: kompose
  
  # https://argo-workflows.readthedocs.io/en/latest/walk-through/argo-cli/
  # FIXME: pin version
  argo:
    <<: *base 
    depends_on: ['k8s']
    image: k8s:argo 
    hostname: k8s:argo
    build:
      context: . 
      dockerfile_inline: |
        FROM quay.io/argoproj/argocli:${ARGO_CLI_VERSION:-v3.4.17} as argo
        FROM k8s:base 
        COPY --from=argo /bin/argo /bin/argo
    entrypoint: argo 
  
  # https://github.com/txn2/kubefwd
  # FIXME: pin version
  kubefwd:
    <<: *base 
    depends_on: ['k8s']
    image: k8s:kubefwd 
    hostname: k8s:kubefwd
    user: root 
    build:
      context: . 
      dockerfile_inline: |
        FROM txn2/kubefwd as builder 
        FROM k8s:base
        COPY --from=builder /kubefwd /usr/bin/kubefwd
    entrypoint: kubefwd
    volumes: 
      # Same as the base volumes, plus /etc/hosts for kubefwd to sync DNS
      - /etc/hosts:/etc/hosts:rw
      - ${PWD}:${workspace:-/workspace}
      - ${DOCKER_SOCKET:-/var/run/docker.sock}:${DOCKER_SOCKET:-/var/run/docker.sock}
      - ${HOME}/.kube:/home/${DOCKER_UGNAME:-root}/.kube
      - ${HOME}/.cache:/home/${DOCKER_UGNAME:-root}/.cache
      - ${HOME}/.config/helm:/home/${DOCKER_UGNAME:-root}/.config/helm
      - ${HOME}/.local:/home/${DOCKER_UGNAME:-root}/.local:ro

  # https://k3d.io/
  k3d:
    <<: *base
    depends_on: ['k8s']
    image: k8s:k3d
    hostname: k8s:k3d
    build:
      context: .
      dockerfile_inline: |
        FROM k8s:base
        USER root
        RUN curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh \
          | TAG=${K3D_VERSION:-v5.6.3} bash
        USER ${DOCKER_UGNAME:-root}
    entrypoint: k3d
  
  # https://github.com/jesseduffield/lazydocker
  lazydocker:
    <<: *base
    depends_on: ['k8s']
    image: k8s:lazydocker
    hostname: k8s:lazydocker
    build:
      context: .
      dockerfile_inline: |
        FROM k8s:base
        USER root
        RUN wget https://github.com/jesseduffield/lazydocker/releases/download/v${LAZY_DOCKER_CLI_VERSION:-0.23.1}/lazydocker_${LAZY_DOCKER_CLI_VERSION:-0.23.1}_Linux_x86_64.tar.gz 
        RUN tar -zxvf lazydocker*
        RUN mv lazydocker /usr/bin && rm lazydocker*
        USER ${DOCKER_UGNAME:-root}
    entrypoint: lazydocker

  # https://github.com/kubernetes-sigs/kind
  kind: 
    image: 'k8s:kind'
    hostname: "k8s:kind"
    build:
      context: .
      dockerfile_inline: |
        FROM debian
        RUN apt-get update && apt-get install -y curl
        RUN [ $(uname -m) = x86_64 ] \
          && curl -Lo /usr/bin/kind https://kind.sigs.k8s.io/dl/${KIND_CLI_VERSION:-v0.23.0}/kind-$(uname)-amd64 \
          && chmod o+x /usr/bin/kind
    entrypoint: /usr/bin/kind

  # https://k9scli.io/
  k9s:
    # NB: no inheritance from `base` since `build` conflicts with `image`.
    image: derailed/k9s
    hostname: k8s:k9s
    tty: true
    network_mode: host
    volumes:
      - type: bind
        source: ${KUBECONFIG:-~/.kube/config}
        target: /kubeconfig.conf
      - ${DOCKER_SOCKET:-/var/run/docker.sock}:${DOCKER_SOCKET:-/var/run/docker.sock}
    environment:
      KUBECONFIG: "/kubeconfig.conf"
    entrypoint: k9s
  
  # https://github.com/rancher/cli
  rancher:
    <<: *base 
    depends_on: ['k8s']
    image: k8s:rancher 
    hostname: k8s:rancher
    build:
      context: . 
      dockerfile_inline: |
        FROM rancher/cli2:${RANCHER_CLI_VERSION:-v2.8.4} as rancher
        FROM k8s:base 
        COPY --from=rancher /usr/bin/rancher /usr/bin/
    entrypoint: /usr/bin/rancher 

  # promtool: https://prometheus.io/docs/prometheus/latest/command-line/promtool/
  promtool:
    <<: *base 
    depends_on: ['k8s']
    image: k8s:promtool
    hostname: k8s:promtool
    build:
      context: . 
      dockerfile_inline: |
        FROM prom/prometheus:${PROMETHEUS_CLI_VERSION:-v2.52.0} as prom
        FROM k8s:base 
        COPY --from=prom /bin/promtool /usr/bin/
        USER ${DOCKER_UGNAME:-root}
    entrypoint: promtool

  yq:
    # NB: included in base, but this option is slimmer
    image: mikefarah/yq:4.43.1

  jq:
    # NB: included in base, but this option is slimmer
    image: ghcr.io/jqlang/jq:1.7.1
    
  
  # https://github.com/tsub/docker-graph-easy
  graph-easy:
    image: tsub/graph-easy
    working_dir: ${workspace:-/workspace} 
    volumes: 
      - ${PWD}:${workspace:-/workspace}

  # https://github.com/efrecon/docker-images/tree/master/chafa
  dind_base: &dind_base 
    image: compose.mk:dind_base 
    build:
      context: . 
      dockerfile_inline: |
        # 5027089adc4c bookworm 
        FROM debian
        RUN groupadd --gid ${DOCKER_GID:-1000} ${DOCKER_UGNAME:-root}
        RUN useradd --uid ${DOCKER_UID:-1000} --gid ${DOCKER_GID:-1000} --shell /bin/bash --create-home ${DOCKER_UGNAME:-root}
        RUN echo "${DOCKER_UGNAME:-root} ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
        RUN apt-get update && apt-get install -y curl uuid-runtime git
        RUN curl -fsSL https://get.docker.com -o get-docker.sh && bash get-docker.sh
        USER ${DOCKER_UGNAME:-root}
  # crux: for dockerized tmux!
  # This is used for TUI scripting by the 'tui.*' targets
  # Docs: .....
  # Manifest: 
  #   [1] tmux 3.4 by default (slightly newer than bookworm default)
  #   [2] tmuxp, for working with profiled sessions
  #   [3] https://github.com/hpjansson/chafa
  #   [4] https://github.com/efrecon/docker-images/tree/master/chafa
  #   [5] https://raw.githubusercontent.com/sunaku/home/master/bin/tmux-layout-dwindle
  crux: &crux
    <<: *dind_base
    image: compose.mk:crux
    hostname: crux
    working_dir: /workspace
    environment: &crux_environment
      DOCKER_UID: ${DOCKER_UID:-1000}
      DOCKER_GID: ${DOCKER_GID:-1000}
      DOCKER_UGNAME: ${DOCKER_UGNAME:-root}
      DOCKER_HOST_WORKSPACE: ${DOCKER_HOST_WORKSPACE:-${PWD}}
      TERM: ${TERM:-xterm-256color}
      COMPOSE_MK_DIND: "1"
    build:
      context: . 
      dockerfile_inline: |
        FROM compose.mk:dind_base
        USER root 
        RUN apt-get update && apt-get install -y python3-pip wget tmux libevent-dev build-essential yacc ncurses-dev
        RUN wget https://github.com/tmux/tmux/releases/download/${TMUX_CLI_VERSION:-3.4}/tmux-${TMUX_CLI_VERSION:-3.4}.tar.gz
        RUN tar -zxvf tmux-${TMUX_CLI_VERSION:-3.4}.tar.gz 
        RUN cd tmux-${TMUX_CLI_VERSION:-3.4} && ./configure && make && mv ./tmux `which tmux`
        RUN pip3 install tmuxp --break-system-packages
        RUN apt-get install -y chafa jq yq bc ack-grep tree pv
        RUN mkdir -p /home/${DOCKER_UGNAME:-root}
        RUN curl -sL https://raw.githubusercontent.com/sunaku/home/master/bin/tmux-layout-dwindle > /usr/bin/tmux-layout-dwindle && chmod ugo+x /usr/bin/tmux-layout-dwindle
        USER ${DOCKER_UGNAME:-root}
        WORKDIR /home/${DOCKER_UGNAME:-root}
        RUN git clone https://github.com/jimeh/tmux-themepack.git ~/.tmux-themepack \
          && git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm \
          && git clone https://github.com/tmux-plugins/tmux-sidebar ~/.tmux/plugins/tmux-sidebar
        RUN tmux show -g | sed 's/^/set-option -g /' > ~/.tmux.conf
        # https://github.com/tmux-plugins/tmux-sidebar/blob/master/docs/options.md
        RUN cat <<EOF >> ~/.tmux.conf
          set -g mouse on
          set -g @plugin 'tmux-plugins/tmux-sensible'
          bind-key  -n  M-1   select-window    -t  :=1
          bind-key  -n  M-2   select-window    -t  :=2
          bind-key  -n  M-3   select-window    -t  :=3
          bind-key  -n  M-4   select-window    -t  :=4
          bind-key  -n  M-5   select-window    -t  :=5
          bind-key  -n  M-6   select-window    -t  :=6
          bind-key  -n  M-7   select-window    -t  :=7
          bind-key  -n  M-8   select-window    -t  :=8
          bind-key  -n  M-9   select-window    -t  :=9
          bind | split-window -h
          bind - split-window -v
          run -b '~/.tmux/plugins/tpm/tpm'
        EOF
        RUN cd ~/.tmux/plugins/tpm/scripts \
          && TMUX_PLUGIN_MANAGER_PATH=~/.tmux/plugins/tpm \
            ./install_plugins.sh

  # dind: &dind
  #   <<: *base 
  #   depends_on: ['dind_base', 'k8s']
  #   image: k8s:dind
  #   hostname: k8s:dind
  #   build:
  #     context: . 
  #     dockerfile_inline: |
  #       FROM k8s:base as base
  #       FROM compose.mk:dind_base 
  #       COPY --from=base \
  #         /usr/bin/kube* /usr/bin/helm* \
  #         /usr/bin/krew /usr/bin/gum \
  #         /usr/bin 
  #       USER ${DOCKER_UGNAME:-root}
  #   entrypoint: bash 
  
  krux: 
    <<: *base
    image: k8s:krux
    hostname: k8s:krux
    environment:
      <<: *base_environment
      KUBECONFIG: "${KUBECONFIG:-~/.kube/config}"
      COMPOSE_MK_DIND: "1"
    build:
      context: . 
      dockerfile_inline: |
        FROM k8s:dind as dind_base
        FROM compose.mk:crux
        COPY --from=dind_base \
          /usr/bin/kube* /usr/bin/helm* \
          /usr/bin/krew /usr/bin/gum \
          /usr/bin 
        USER root 
        RUN apt-get update && apt-get install -y graphviz imagemagick
        USER ${DOCKER_UGNAME:-root}

# https://github.com/kdash-rs/kdash?tab=readme-ov-file